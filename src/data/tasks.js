// Tarea 5
const tasks = [
  {
    id: 1,
    title: "Validador de Mayor√≠a de Edad y Pr√©stamos con Pruebas Jest ",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "Sistema de validaci√≥n con funciones esMayorDeEdad y puedeAprobarPrestamo, incluyendo pruebas unitarias completas.",
    details: `Desarrollo de un m√≥dulo en Node.js (TypeScript/JavaScript) que implementa:
    
‚Ä¢ Funci√≥n esMayorDeEdad: Valida si una persona es mayor de edad basado en su edad
‚Ä¢ Funci√≥n puedeAprobarPrestamo: Eval√∫a condiciones para aprobaci√≥n de pr√©stamos
‚Ä¢ Tablas de prueba: Clases de equivalencia y tablas de decisiones
‚Ä¢ Pruebas unitarias con Jest: Cobertura del 100% de las funciones
‚Ä¢ Video explicativo: Demostraci√≥n con PIP del estudiante

**T√©cnicas aplicadas:** Pruebas de software, Jest, Node.js, TypeScript, Validaci√≥n de requisitos.`,
    githubUrl: "https://github.com/JeremyRodriguez17/ProyectoU.git",
    technologies: [
      "Node.js",
      "TypeScript",
      "Jest",
      "JavaScript",
      "Testing",
      "QA",
    ],
    date: "29 de Agosto de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Intermedia",
  },

  // Tarea 6
  {
    id: 2,
    title: "Sistema de Aprobaci√≥n de Pr√©stamos por Perfil de Cliente",
    course: "Pruebas Unitarias en JavaScript/TypeScript",
    semester: "2025-2",
    description:
      "Funci√≥n que eval√∫a aprobaci√≥n de pr√©stamos para estudiantes, empleados, independientes y retirados.",
    details: `**Sistema de Aprobaci√≥n de Pr√©stamos Bancarios por Perfil**

Desarrollo de una funci√≥n en JavaScript/TypeScript que determina la aprobaci√≥n de pr√©stamos bas√°ndose en m√∫ltiples reglas de negocio y perfiles de cliente.

**üî¥ Rechazo Inmediato:**
- Si moraActiva = true O score < 600 ‚áí NO aprobado

**üìã Reglas Base (aplican a todos los perfiles):**
- Debe tener ingresosVerificados = true Y dti ‚â§ 35
- Excepci√≥n para estudiantes: puede sustituir con garante = true

**üéØ Umbrales por Perfil (si pasa reglas base):**
- **Estudiante:** garante = true O score ‚â• 650
- **Empleado:** antiguedadMeses ‚â• 6 Y score ‚â• 650  
- **Independiente:** antiguedadMeses ‚â• 12 Y score ‚â• 670
- **Retirado:** score ‚â• 640

**üß™ Pruebas Unitarias Implementadas:**
- Tests para cada perfil y escenario posible
- Validaci√≥n de casos l√≠mite y edge cases
- Cobertura del 100% de las funcionalidades`,
    githubUrl:
      "https://github.com/JeremyRodriguez17/Tarea-6-Unit-test---JS-TS.git",
    demoUrl: "https://tarea-6-unit-test-js-ts.vercel.app",
    technologies: [
      "JavaScript",
      "TypeScript",
      "Jest",
      "Testing Library",
      "Node.js",
      "Unit Testing",
      "Vercel",
    ],
    date: "13 de Septiembre de 2025 ",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Avanzada",
  },

  // Tarea 7
  {
    id: 3,
    title: "Clases de Equivalencia, Valores Frontera y Tablas de Decisi√≥n",
    course: "Herramientas de Testing de Software",
    semester: "2025-2",
    description:
      "Implementaci√≥n pr√°ctica de t√©cnicas avanzadas de testing con Vitest y Node.js.",
    details: `**T√©cnicas Avanzadas de Testing: Clases de Equivalencia y Tablas de Decisi√≥n**

Implementaci√≥n completa de dos t√©cnicas fundamentales de testing de software con ejemplos pr√°cticos, c√≥digo y pruebas unitarias.

**üìä PARTE 1: Clases de Equivalencia y An√°lisis de Valores Frontera**

**Objetivo:** Desarrollar un ejemplo pr√°ctico aplicando:
- Identificaci√≥n de clases de equivalencia v√°lidas e inv√°lidas
- An√°lisis de valores en la frontera para casos l√≠mite
- Desarrollo del c√≥digo correspondiente
- Pruebas unitarias con cobertura del 100%

**Ejemplo Implementado:** Sistema de validaci√≥n de rangos num√©ricos con:
- Clases de equivalencia para diferentes intervalos
- Valores frontera en los l√≠mites de cada intervalo
- Casos de prueba para condiciones l√≠mite

**üìã PARTE 2: Tablas de Decisi√≥n**

**Objetivo:** Elaborar un ejemplo pr√°ctico de tablas de decisi√≥n con:
- Definici√≥n de condiciones y acciones
- Combinaci√≥n exhaustiva de reglas de negocio
- Desarrollo del c√≥digo basado en la tabla de decisi√≥n
- Pruebas unitarias para validar cada regla

**Ejemplo Implementado:** Sistema de aprobaci√≥n de descuentos con m√∫ltiples condiciones:
- Condiciones: tipo de cliente, monto de compra, antig√ºedad
- Actions: porcentaje de descuento aplicable
- Tabla de decisi√≥n con todas las combinaciones posibles`,
    githubUrl:
      "https://github.com/JeremyRodriguez17/Tarea-calidad-software.git",
    technologies: [
      "Node.js",
      "Vitest",
      "JavaScript",
      "TypeScript",
      "Testing",
      "Clases de Equivalencia",
      "Tablas de Decisi√≥n",
      "Valores Frontera",
    ],
    date: "20 de Septiembre de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Avanzada",
  },

  // Tarea 8

  {
    id: 4,
    title: "Registro de errores",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "Registro y seguimiento de bugs reportados utilizando herramientas de gesti√≥n de issues.",
    details: `**Registro y Seguimiento de Bugs**

Implementaci√≥n completa de dos t√©cnicas fundamentales de testing de software con ejemplos pr√°cticos, c√≥digo y pruebas unitarias.

**üìä PARTE 1: Registro de Bugs Reportados **

- Objetivo: Registrar los 12 bugs identificados en el documento proporcionado utilizando
 una herramienta de seguimiento de bugs:

 - Bugs Registrados:

 - El software es lento o tiene un rendimiento deficiente (bug #12)
 - El software no es intuitivo y es dif√≠cil de usar (bug #11)
 - El software no cumple con los requisitos del usuario (bug #10)
 - El software no es seguro y puede ser vulnerable a ataques (bug #9)
 - Los datos se pierden o corrompen (bug #8)
 - El software no funciona en un determinado sistema operativo o dispositivo (bug #7)
 - El software no se instala correctamente (bug #6)
 - La aplicaci√≥n se bloquea al intentar abrir un archivo (bug #5)
 - El men√∫ desplegable no funciona correctamente (bug #4)
 - El formulario de contacto no se env√≠a correctamente (bug #3)
 - El bot√≥n "Enviar" no funciona (bug #2)

 Herramienta Utilizada: GitHub Issues 

**üìã PARTE 2: Seguimiento y Gesti√≥n de Bugs**

- Objetivo: Realizar el seguimiento completo de cada bug reportado mediante:

Proceso de Seguimiento:

- Registro inicial con descripci√≥n detallada
- Categorizaci√≥n por tipo y prioridad
- Asignaci√≥n de responsables
- Establecimiento de estados (abierto, en progreso, resuelto, cerrado)
- Seguimiento de comentarios y actualizaciones
- Verificaci√≥n de resoluci√≥n y cierre

Metodolog√≠a Aplicada:

- Uso de labels para clasificaci√≥n
- Sistema de milestones para agrupaci√≥n
- Comentarios de progreso
- Validaci√≥n de soluciones implementadas

Documentaci√≥n del proceso completo`,
    githubUrl: "https://github.com/JeremyRodriguez17/Seguimiento-bugs/issues",
    technologies: [
      "GitHub Issues",
      "Gesti√≥n de Bugs",
      "Seguimiento de Errores",
      "Issue Tracking",
      "Quality Assurance",
      "Testing",
    ],
    date: "11 de Octubre de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Intermedia",
  },
  // AGREGAR ESTAS TAREAS AL FINAL DE TU ARRAY tasks (antes del export default)

  // Tarea 5 - Mapa conceptual e investigaci√≥n
  {
    id: 5,
    title:
      "Mapa Conceptual e Investigaci√≥n - Calidad del Software y Herramientas de Testing",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "Investigaci√≥n completa sobre calidad del software, factores de calidad, y herramientas de testing como Chai, Mocha y Jest.",
    details: `**Investigaci√≥n sobre Calidad del Software y Herramientas de Testing**

**üìä CALIDAD DEL SOFTWARE**
- **Definici√≥n:** Capacidad de un software para cumplir con requisitos establecidos bajo condiciones espec√≠ficas
- **Factores de Calidad:** Funcionalidad, Fidelidad, Mantenibilidad, Portabilidad
- **Dimensiones:** Calidad Interna, Calidad Externa, Calidad de Uso
- **Basado en normas ISO/IEC 25010**

**üõ†Ô∏è HERRAMIENTAS DE TESTING INVESTIGADAS**

**Chai.js - Biblioteca de Aserciones para JavaScript**
- M√∫ltiples estilos de afirmaci√≥n: Assert, Expect, Should
- Afirmaciones encadenables y mensajes de error enriquecidos
- Compatibilidad con complementos y entornos (Node.js y navegador)
- Integraci√≥n con Mocha, Jasmine y otros frameworks

**Mocha.js - Framework de Pruebas de JavaScript**
- Pruebas s√≠ncronas y as√≠ncronas
- Reportes detallados y utilidades de ejecuci√≥n
- Ideal para pruebas unitarias y de integraci√≥n

**Jest - Framework de Testing para JavaScript**
- Cobertura del 100% de las funciones
- Configuraci√≥n cero y f√°cil integraci√≥n
- Snapshots y mocking integrado

**NPM (Node Package Manager)**
- Gestor de paquetes JavaScript m√°s utilizado
- Instalaci√≥n r√°pida de librer√≠as y dependencias

**üéØ OBJETIVOS DE APRENDIZAJE**
- Comprender los fundamentos de la calidad del software
- Conocer las principales herramientas de testing en JavaScript
- Aplicar t√©cnicas de pruebas unitarias y de integraci√≥n
- Implementar aserciones efectivas con Chai.js`,
    documentUrl:
      "/documents/tareas/Tarea 1.2. - Mapa conceptual e investigaci√≥n.pdf",
    documentType: "pdf",
    technologies: [
      "JavaScript",
      "Chai.js",
      "Mocha.js",
      "Jest",
      "Node.js",
      "Testing",
      "ISO 25010",
      "Calidad de Software",
    ],
    date: "17 de Julio de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Intermedia",
    type: "document",
    category: "research",
  },

  // Tarea 6 - An√°lisis cr√≠tico del aseguramiento de calidad
  {
    id: 6,
    title:
      "An√°lisis Cr√≠tico del Aseguramiento de la Calidad - Est√°ndares Internacionales",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "An√°lisis profundo de est√°ndares internacionales ISO 25010, ISO 29119 e IEEE 730 para calidad del software.",
    details: `**AN√ÅLISIS CR√çTICO DE EST√ÅNDARES INTERNACIONALES DE CALIDAD**

**üèÜ EST√ÅNDARES ANALIZADOS**

**1. ISO/IEC 25010 - Modelo de Calidad del Producto Software**
- **Prop√≥sito:** Definir caracter√≠sticas de calidad del software
- **Caracter√≠sticas principales:** Funcionalidad, Rendimiento, Seguridad, Usabilidad, Compatibilidad, Mantenibilidad, Portabilidad
- **Aplicaci√≥n:** Evaluaci√≥n sistem√°tica de productos software
- **Beneficios:** Comunicaci√≥n clara, reducci√≥n de errores, m√©tricas estandarizadas

**2. ISO/IEC/IEEE 29119 - Est√°ndares de Pruebas de Software**
- **Prop√≥sito:** Establecer procesos estandarizados para pruebas de software
- **Componentes:** Conceptos, Procesos, Documentaci√≥n, T√©cnicas, Pruebas basadas en palabras clave
- **Aplicaci√≥n:** Organizaci√≥n de equipos de testing y documentaci√≥n de resultados
- **Beneficios:** Terminolog√≠a com√∫n, mejora en control de pruebas, detecci√≥n temprana de errores

**3. IEEE 730 - Planes de Aseguramiento de la Calidad**
- **Prop√≥sito:** Definir planificaci√≥n sistem√°tica de actividades de calidad
- **Componentes SQAP:** Definici√≥n de requisitos, planes de prueba, metodolog√≠as de revisi√≥n, gesti√≥n de riesgos
- **Aplicaci√≥n:** Creaci√≥n de planes claros con responsables y m√©tricas
- **Beneficios:** Estructura ordenada, prevenci√≥n de problemas, alineaci√≥n del equipo

**üìä COMPARATIVA DE MODELOS DE CALIDAD**
- **ISO 25010:** Enfoque moderno e integral (2011)
- **Modelo McCall:** Enfoque t√©cnico-hist√≥rico (1977) 
- **Modelo Boehm:** Perspectiva del usuario (1981)

**üë• ROLES EN EL ASEGURAMIENTO DE CALIDAD**
- Project Manager: Liderazgo y organizaci√≥n
- Scrum Master: Metodolog√≠as √°giles
- Analista Comercial: Necesidades del cliente

**‚ö†Ô∏è RIESGOS DE NO IMPLEMENTAR CALIDAD**
- Software no funcional, p√©rdida de clientes, costos adicionales, impactos cr√≠ticos`,
    documentUrl:
      "/documents/tareas/Tarea 2 - An√°lisis cr√≠tico del aseguramiento de la calidad de software.pdf",
    documentType: "pdf",
    technologies: [
      "ISO 25010",
      "ISO 29119",
      "IEEE 730",
      "Gesti√≥n de Calidad",
      "SQAP",
      "Procesos QA",
      "Est√°ndares Internacionales",
      "Modelos de Calidad",
    ],
    date: "24 de Julio de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Avanzada",
    type: "document",
    category: "analysis",
  },

  // Tarea 7 - Gu√≠a OWASP y Planes de Prueba
  {
    id: 7,
    title: "Gu√≠a OWASP y Planes de Prueba - Seguridad Web y Casos de Prueba",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "Gu√≠a completa de seguridad web basada en OWASP Top 10 y documentaci√≥n de planes y casos de prueba.",
    details: `**GU√çA OWASP TOP 10 2021 Y PLANES DE PRUEBA**

**üõ°Ô∏è GU√çA OWASP TOP 10 - SEGURIDAD WEB**

**Vulnerabilidades Cr√≠ticas y Prevenci√≥n:**

1. **Accesos sin Permiso (Broken Access Control)**
   - Prevenci√≥n: Asignaci√≥n espec√≠fica de permisos, ocultar funciones no autorizadas

2. **Protecci√≥n D√©bil de Datos (Cryptographic Failures)**
   - Prevenci√≥n: Cifrado fuerte, uso de HTTPS, validaci√≥n de datos sensibles

3. **Inyecci√≥n de Datos Maliciosos (Injection)**
   - Prevenci√≥n: Validaci√≥n de entradas, evitar ejecuci√≥n autom√°tica

4. **Falta de Seguridad en el Dise√±o (Insecure Design)**
   - Prevenci√≥n: Planificaci√≥n de seguridad desde el inicio, an√°lisis de riesgos

5. **Mala Configuraci√≥n del Sistema (Security Misconfiguration)**
   - Prevenci√≥n: Desactivar funciones innecesarias, cambiar contrase√±as por defecto

6. **Componentes Vulnerables y Desactualizados**
   - Prevenci√≥n: Mantener actualizaciones, evitar herramientas sin soporte

7. **Fallos de Identificaci√≥n y Autenticaci√≥n**
   - Prevenci√≥n: Contrase√±as fuertes, verificaci√≥n en dos pasos

8. **Fallos de Integridad de Software y Datos**
   - Prevenci√≥n: Verificaci√≥n de fuentes confiables, control de cambios

9. **Fallos de Registro y Monitoreo de Seguridad**
   - Prevenci√≥n: Activaci√≥n de logs, revisiones regulares, alertas

10. **Falsificaci√≥n de Peticiones del Lado del Servidor (SSRF)**
    - Prevenci√≥n: Control de conexiones, aprobaci√≥n previa de sitios

**üìã PLANES Y CASOS DE PRUEBA**

**Plan de Pruebas:**
- **Alcance:** Definici√≥n de requisitos t√©cnicos y funcionales
- **Objetivos:** Validaci√≥n completa, planificaci√≥n detallada, gesti√≥n de defectos
- **Componentes:** Programaci√≥n, recursos, entorno, herramientas, gesti√≥n de riesgos

**Casos de Prueba:**
- **Formato Est√°ndar:** ID, escenario, pasos, datos, resultados esperados/actuales
- **Ejemplo Pr√°ctico:** Cat√°logo CRUD (Crear, Editar, Eliminar, Listar)
- **Validaci√≥n:** Funcionalidad completa, manejo de errores, prevenci√≥n de duplicados`,
    documentUrl:
      "/documents/tareas/Tarea 3 - Guia OWASP, Investigaci√≥n Planes y Casos de prueba.pdf",
    documentType: "pdf",
    technologies: [
      "OWASP Top 10",
      "Seguridad Web",
      "Planes de Prueba",
      "Casos de Prueba",
      "Testing Manual",
      "CRUD Testing",
      "Vulnerabilidades",
      "Ciberseguridad",
    ],
    date: "1 de Agosto de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Intermedia",
    type: "document",
    category: "security",
  },

  // Tarea 8 - Tipos de prueba y herramientas
  {
    id: 8,
    title:
      "Investigaci√≥n de Herramientas para Pruebas de Software - Funcionales, Rendimiento y Seguridad",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "Documentaci√≥n completa de herramientas para pruebas funcionales, de rendimiento y seguridad del software.",
    details: `**INVESTIGACI√ìN DE HERRAMIENTAS PARA PRUEBAS DE SOFTWARE**

**üîß PRUEBAS FUNCIONALES**

**Definici√≥n:** Validaci√≥n de funcionalidades espec√≠ficas seg√∫n requerimientos del cliente

**Tipos:**
- Pruebas de Humo (Smoke Testing)
- Pruebas de Regresi√≥n  
- Pruebas de Integraci√≥n
- Pruebas de Aceptaci√≥n del Usuario (UAT)
- Pruebas de Caja Negra

**Herramientas Analizadas:**

**Selenium IDE**
- Automatizaci√≥n de pruebas en navegadores
- Grabaci√≥n y reproducci√≥n de tests
- Compatibilidad multiplataforma
- Integraci√≥n con CI/CD

**Postman**
- Pruebas de APIs funcionales
- Gesti√≥n de entornos y colecciones
- Pruebas automatizadas y colaboraci√≥n
- Interfaz intuitiva para desarrollo

**üìà PRUEBAS DE RENDIMIENTO**

**Definici√≥n:** Medici√≥n de velocidad, respuesta, uso de recursos y escalabilidad

**Tipos:**
- Pruebas de Carga (Load Testing)
- Pruebas de Estr√©s (Stress Testing) 
- Pruebas de Escalabilidad (Scalability Testing)

**Herramientas Analizadas:**

**Apache JMeter**
- C√≥digo abierto y gratuito
- Soporte m√∫ltiples protocolos
- Escalabilidad e integraci√≥n CI/CD
- Amplia comunidad y plugins

**LoadRunner**
- Soluci√≥n empresarial comercial
- Scripting avanzado con VuGen
- An√°lisis detallado y monitoreo en tiempo real
- Soporte para m√°s de 50 protocolos

**üõ°Ô∏è PRUEBAS DE SEGURIDAD**

**Definici√≥n:** Identificaci√≥n de vulnerabilidades, amenazas y riesgos en el sistema

**Ejemplo:** Inyecci√≥n SQL - Manipulaci√≥n de consultas a base de datos

**Herramientas Analizadas:**

**SonarQube**
- An√°lisis de calidad del c√≥digo fuente
- Detecci√≥n de vulnerabilidades y aplicaci√≥n de normas
- Soporte para m√∫ltiples lenguajes de programaci√≥n
- M√©tricas de arquitectura, duplicaci√≥n, complejidad

**OWASP ZAP**
- C√≥digo abierto para seguridad web
- Escaneo activo y pasivo de vulnerabilidades
- Proxy interceptador y reporting detallado
- F√°cil uso para principiantes

**üéØ CONCLUSIONES Y RECOMENDACIONES**
- Importancia de la selecci√≥n adecuada de herramientas
- Integraci√≥n en el ciclo de desarrollo
- Impacto en la calidad y seguridad del software
- Mejores pr√°cticas para implementaci√≥n`,
    documentUrl: "/documents/tareas/Tarea 4 - Tipos de prueba.pdf",
    documentType: "pdf",
    technologies: [
      "Selenium",
      "Postman",
      "Apache JMeter",
      "LoadRunner",
      "SonarQube",
      "OWASP ZAP",
      "Pruebas Funcionales",
      "Pruebas de Rendimiento",
      "Pruebas de Seguridad",
      "Automatizaci√≥n",
    ],
    date: "11 de Agosto de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Avanzada",
    type: "document",
    category: "tools",
  },
];
export default tasks;
