// Tarea 5
const tasks = [
  {
    id: 1,
    title: "Validador de Mayor√≠a de Edad y Pr√©stamos con Pruebas Jest ",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "Sistema de validaci√≥n con funciones esMayorDeEdad y puedeAprobarPrestamo, incluyendo pruebas unitarias completas.",
    details: `Desarrollo de un m√≥dulo en Node.js (TypeScript/JavaScript) que implementa:
    
‚Ä¢ Funci√≥n esMayorDeEdad: Valida si una persona es mayor de edad basado en su edad
‚Ä¢ Funci√≥n puedeAprobarPrestamo: Eval√∫a condiciones para aprobaci√≥n de pr√©stamos
‚Ä¢ Tablas de prueba: Clases de equivalencia y tablas de decisiones
‚Ä¢ Pruebas unitarias con Jest: Cobertura del 100% de las funciones
‚Ä¢ Video explicativo: Demostraci√≥n con PIP del estudiante

**T√©cnicas aplicadas:** Pruebas de software, Jest, Node.js, TypeScript, Validaci√≥n de requisitos.`,
    githubUrl: "https://github.com/JeremyRodriguez17/ProyectoU.git",
    technologies: [
      "Node.js",
      "TypeScript",
      "Jest",
      "JavaScript",
      "Testing",
      "QA",
    ],
    date: "29 de Agosto de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Intermedia",
  },

  // Tarea 6
  {
    id: 2,
    title: "Sistema de Aprobaci√≥n de Pr√©stamos por Perfil de Cliente",
    course: "Pruebas Unitarias en JavaScript/TypeScript",
    semester: "2025-2",
    description:
      "Funci√≥n que eval√∫a aprobaci√≥n de pr√©stamos para estudiantes, empleados, independientes y retirados.",
    details: `**Sistema de Aprobaci√≥n de Pr√©stamos Bancarios por Perfil**

Desarrollo de una funci√≥n en JavaScript/TypeScript que determina la aprobaci√≥n de pr√©stamos bas√°ndose en m√∫ltiples reglas de negocio y perfiles de cliente.

**üî¥ Rechazo Inmediato:**
- Si moraActiva = true O score < 600 ‚áí NO aprobado

**üìã Reglas Base (aplican a todos los perfiles):**
- Debe tener ingresosVerificados = true Y dti ‚â§ 35
- Excepci√≥n para estudiantes: puede sustituir con garante = true

**üéØ Umbrales por Perfil (si pasa reglas base):**
- **Estudiante:** garante = true O score ‚â• 650
- **Empleado:** antiguedadMeses ‚â• 6 Y score ‚â• 650  
- **Independiente:** antiguedadMeses ‚â• 12 Y score ‚â• 670
- **Retirado:** score ‚â• 640

**üß™ Pruebas Unitarias Implementadas:**
- Tests para cada perfil y escenario posible
- Validaci√≥n de casos l√≠mite y edge cases
- Cobertura del 100% de las funcionalidades`,
    githubUrl:
      "https://github.com/JeremyRodriguez17/Tarea-6-Unit-test---JS-TS.git",
    demoUrl: "https://tarea-6-unit-test-js-ts.vercel.app",
    technologies: [
      "JavaScript",
      "TypeScript",
      "Jest",
      "Testing Library",
      "Node.js",
      "Unit Testing",
      "Vercel",
    ],
    date: "13 de Septiembre de 2025 ",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Avanzada",
  },

  // Tarea 7
  {
    id: 3,
    title: "Clases de Equivalencia, Valores Frontera y Tablas de Decisi√≥n",
    course: "Herramientas de Testing de Software",
    semester: "2025-2",
    description:
      "Implementaci√≥n pr√°ctica de t√©cnicas avanzadas de testing con Vitest y Node.js.",
    details: `**T√©cnicas Avanzadas de Testing: Clases de Equivalencia y Tablas de Decisi√≥n**

Implementaci√≥n completa de dos t√©cnicas fundamentales de testing de software con ejemplos pr√°cticos, c√≥digo y pruebas unitarias.

**üìä PARTE 1: Clases de Equivalencia y An√°lisis de Valores Frontera**

**Objetivo:** Desarrollar un ejemplo pr√°ctico aplicando:
- Identificaci√≥n de clases de equivalencia v√°lidas e inv√°lidas
- An√°lisis de valores en la frontera para casos l√≠mite
- Desarrollo del c√≥digo correspondiente
- Pruebas unitarias con cobertura del 100%

**Ejemplo Implementado:** Sistema de validaci√≥n de rangos num√©ricos con:
- Clases de equivalencia para diferentes intervalos
- Valores frontera en los l√≠mites de cada intervalo
- Casos de prueba para condiciones l√≠mite

**üìã PARTE 2: Tablas de Decisi√≥n**

**Objetivo:** Elaborar un ejemplo pr√°ctico de tablas de decisi√≥n con:
- Definici√≥n de condiciones y acciones
- Combinaci√≥n exhaustiva de reglas de negocio
- Desarrollo del c√≥digo basado en la tabla de decisi√≥n
- Pruebas unitarias para validar cada regla

**Ejemplo Implementado:** Sistema de aprobaci√≥n de descuentos con m√∫ltiples condiciones:
- Condiciones: tipo de cliente, monto de compra, antig√ºedad
- Actions: porcentaje de descuento aplicable
- Tabla de decisi√≥n con todas las combinaciones posibles`,
    githubUrl:
      "https://github.com/JeremyRodriguez17/Tarea-calidad-software.git",
    technologies: [
      "Node.js",
      "Vitest",
      "JavaScript",
      "TypeScript",
      "Testing",
      "Clases de Equivalencia",
      "Tablas de Decisi√≥n",
      "Valores Frontera",
    ],
    date: "20 de Septiembre de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Avanzada",
  },

  // Tarea 8

  {
    id: 4,
    title: "Registro de errores",
    course: "Aseguramiento de la Calidad del Software",
    semester: "2025-2",
    description:
      "Registro y seguimiento de bugs reportados utilizando herramientas de gesti√≥n de issues.",
    details: `**Registro y Seguimiento de Bugs**

Implementaci√≥n completa de dos t√©cnicas fundamentales de testing de software con ejemplos pr√°cticos, c√≥digo y pruebas unitarias.

**üìä PARTE 1: Registro de Bugs Reportados **

- Objetivo: Registrar los 12 bugs identificados en el documento proporcionado utilizando
 una herramienta de seguimiento de bugs:

 - Bugs Registrados:

 - El software es lento o tiene un rendimiento deficiente (bug #12)
 - El software no es intuitivo y es dif√≠cil de usar (bug #11)
 - El software no cumple con los requisitos del usuario (bug #10)
 - El software no es seguro y puede ser vulnerable a ataques (bug #9)
 - Los datos se pierden o corrompen (bug #8)
 - El software no funciona en un determinado sistema operativo o dispositivo (bug #7)
 - El software no se instala correctamente (bug #6)
 - La aplicaci√≥n se bloquea al intentar abrir un archivo (bug #5)
 - El men√∫ desplegable no funciona correctamente (bug #4)
 - El formulario de contacto no se env√≠a correctamente (bug #3)
 - El bot√≥n "Enviar" no funciona (bug #2)

 Herramienta Utilizada: GitHub Issues 

**üìã PARTE 2: Seguimiento y Gesti√≥n de Bugs**

- Objetivo: Realizar el seguimiento completo de cada bug reportado mediante:

Proceso de Seguimiento:

- Registro inicial con descripci√≥n detallada
- Categorizaci√≥n por tipo y prioridad
- Asignaci√≥n de responsables
- Establecimiento de estados (abierto, en progreso, resuelto, cerrado)
- Seguimiento de comentarios y actualizaciones
- Verificaci√≥n de resoluci√≥n y cierre

Metodolog√≠a Aplicada:

- Uso de labels para clasificaci√≥n
- Sistema de milestones para agrupaci√≥n
- Comentarios de progreso
- Validaci√≥n de soluciones implementadas

Documentaci√≥n del proceso completo`,
    githubUrl: "https://github.com/JeremyRodriguez17/Seguimiento-bugs/issues",
    technologies: [
      "GitHub Issues",
      "Gesti√≥n de Bugs",
      "Seguimiento de Errores",
      "Issue Tracking",
      "Quality Assurance",
      "Testing",
    ],
    date: "11 de Octubre de 2025",
    status: "Completado",
    profesor: "Ing. Carmelo Estuardo May√©n Monterroso",
    universidad: "Universidad Mariano G√°lvez",
    complejidad: "Intermedia",
  },
];
export default tasks;
